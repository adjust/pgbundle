#!/usr/bin/env ruby
require 'thor'
require 'thor/group'
require 'pgbundle'
require 'pry'

module PgBundle
  class Cli < Thor
    desc 'install', 'installs extensions'
    method_options %w( force -f ) => :boolean
    def install(*pgfiles)
      if pgfiles.count == 0
	pgfiles = ['Pgfile']
      end
      pgfiles.each do |pgfile|
        if options.force?
          installed = definition(pgfile).install!
        else
          definition(pgfile).available_extensions.each do |dep|
            say_status('exists', dep.name)
          end

          installed = definition(pgfile).install
        end

        installed.each do |d|
          say_status('install', d.name, :yellow)
        end
      end
    rescue InstallError, ExtensionCreateError, CircularDependencyError => e
      say_status('error', e.message, :red)
      exit 1
    end

    desc 'check', 'checks availability of required extensions'
    def check(pgfile = 'Pgfile')
      missing = false
      definition(pgfile).check.each do |d|
        if d[:created]
          say_status('created', d[:name])
        else
          unless d[:installed]
            say_status('missing', d[:name], :red)
            missing = true
          end
          say_status('installed', d[:name], :yellow) if d[:installed]
        end
      end
      exit 1 if missing
    end

    desc 'create', 'create the extension at the desired version'
    def create(pgfile = 'Pgfile')
      definition(pgfile).create.each do | d |
        say_status('created', d.name)
      end
    end

    desc 'init', 'write an initial pgfile to stdout'
    method_options %w( user -u ) => :string
    method_options %w( host -h ) => :string
    def init(db_name)
      definition = PgBundle::Definition.new
      definition.database = PgBundle::Database.new(db_name, options)
      say("found the following definition for your current database:\n\n")
      say definition.init.join("\n")
    end

    no_commands do
      def definition(pgfile)
        definition = Dsl.new.eval_pgfile(pgfile)
        definition.link_dependencies
      end
    end
  end
end

PgBundle::Cli.start(ARGV)
